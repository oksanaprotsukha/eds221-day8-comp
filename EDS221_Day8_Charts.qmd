---
title: "EDS221_Day8_Charts"
author: "OP"
format: html
editor: visual
---

```{r}
library(janitor)
library(tidyverse)

# --- libraries to create charts
library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(gapminder)
library(sf)
```

```{r}
lizards <- read_csv(here::here("data_tidy", "lizards.csv"))
```

Do some data wrangling to create a new subset from lizards that contain only western whiptails, colorado checkered, and eastern fence lizards

Add a new column with total length converted to cm

Group by species and site

Return a summary stats: mean & std of total length by species and site

```{r}
lizards_subset <- lizards %>% 
  filter(common_name %in% c("western whiptail", "colorado checkered", "eastern fence")) %>% 
  mutate(total_length_cm = total_length/10) %>% 
  relocate(total_length_cm, .after = total_length) %>% 
  group_by(common_name, site) %>% 
  summarise(total_length_mean = mean(total_length),
           total_length_sd = sd(total_length))
```

```{r}
lizards_plot <- ggplot(data = lizards, aes(x = total_length, y = weight))+
  geom_point(aes(color = common_name))+
  # ~ >> is used to define "a function of"
  # scales = "free" >> creates a scale appropriate to individual facet. The charts cannot be compared directly since they use different scale
  facet_wrap(~ common_name, scales = "free")
  theme_minimal()

lizards_plot
```

```{r}
# Use dplyr::count to find the total number of lizards by common_name in the lizards dataset
lizards_count <- lizards %>% 
  count(common_name)

lizards_count


# Alternative
lizards_count_2 <- lizards %>% 
  group_by(common_name) %>% 
  summarise(count_by_common_name = n())

#lizards_count_2
```

### Bar chart with ordered series

```{r}
  # order the series by a factor
  # if you want groups to be displayed in a meaningful order that series have to be converted to a factor
lizards_count_ggplot <- ggplot(data = lizards_count, aes(y = fct_reorder(common_name, n), x = n))+
  geom_col()

lizards_count_ggplot
```

### Scatterplot with different scales

```{r}
lizards_scatterplot_scale <- ggplot(data = lizards, aes(x = total_length, y = weight))+
  geom_point(aes(color = weight))+
  # y is the continuous variable of weight
  scale_y_continuous(limits = c(0, 65), 
                     breaks = seq(from = 0, to = 65, by = 10),
                     expand = c(0, 0))+
  # scale_color_gradient(low = "red", high= "navy")
  scale_color_gradientn(colors = c("darkgreen", "orange", "red"))
  # alternative: scale_color_gradientn(<use as many colors as desired>)
  #theme_minimal()

lizards_scatterplot_scale
```

```{r}
ggplot(data = gapminder, aes(x = lifeExp, y = gdpPercap))+
  geom_point()+
  annotate("text", x = 40, y = 9000, label = "A label")+
  geom_hline(yintercept = 70000, linetype = "dotted", color = "purple")+
  geom_vline(xintercept = mean(gapminder$lifeExp))
```

```{r}
gapminder %>% 
  filter(continent == "Europe", year == 2002) %>% 
  ggplot(aes(x = gdpPercap, y = lifeExp))+
  geom_point(shape = 23, size = 3, color = "blue", fill = "yellow")+
  #ggrepel ensures that text annotations do not overlap with the points
  # geom_text_repel(aes(label = country))+
  gghighlight(country == "Poland", label_key = country)+
  theme_minimal()
```

```{r}
# Create ggplot using data only from 2005, then highlight all countries in Europe, adding their country names as the label

gapminder %>% 
  filter(year == 2007, lifeExp >= 80) %>% 
  ggplot(aes(x = gdpPercap, y = lifeExp))+
  geom_point(shape = 23, size = 3, color = "blue", fill = "yellow")+
  #ggrepel ensures that text annotations do not overlap with the points
  # geom_text_repel(aes(label = country))+
  gghighlight(continent == "Europe", label_key = country)+
  theme_minimal()

```

```{r}
# Create ggplot using data only from 2005, then highlight all countries in Europe, adding their country names as the label

gapminder %>% 
  filter(year == 2007) %>% 
  ggplot(aes(x = gdpPercap, y = lifeExp))+
  geom_point()+
  #ggrepel ensures that text annotations do not overlap with the points
  geom_text_repel(aes(label = country))+
  gghighlight(continent == "Europe")+
  theme_minimal()
```

```{r}
jornada_veg <- read_sf(here::here("data_raw", "spatial_vegetation", "doc.kml")) %>% 
  # Keep only Name column. Note: spatial component will remain available if the file was opened using read_sf function
  select(Name)

# geom_sf automatically determines x & y variables
ggplot()+
  geom_sf(data = jornada_veg, aes(fill = Name), color = NA)+
  theme_minimal()+
  # view different color pallet options >>> view(palettes_d_names)
  # scale_fill_paletteer_d(palette = "<package>::<palette>")
  # scale_fill_paletteer_d(palette = "ggthemes::manyeys")
  scale_fill_paletteer_d(palette = "palettetown::croconaw")
```

```{r}
jornada_veg_1 <- read_sf(here::here("data_raw", "spatial_vegetation", "doc.kml")) %>% 
  # Keep only Name column. Note: spatial component will remain available if the file was opened using read_sf function
  select(Name)

# geom_sf automatically determines x & y variables
ggplot()+
  geom_sf(data = jornada_veg, aes(fill = Name), color = NA)+
  theme_minimal()+
  scale_fill_paletteer_d(palette = "palettetown::croconaw")+
  theme(panel.background = element_rect(color = "orange", size = 5, fill = "white"),
        plot.background = element_rect(fill = "lightyellow"),
        panel.grid.major = element_line(color = "lightgrey"),
        axis.text.x = element_text(color = "blue"),
        axis.text.y = element_text(color = "blue"))

```
